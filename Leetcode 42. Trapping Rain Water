Given n non-negative integers representing an elevation map where the width of each bar is 1, compute how much water it can trap after raining.
Input: height = [0,1,0,2,1,0,1,3,2,1,2,1]
Output: 6
Explanation: The above elevation map (black section) is represented by array [0,1,0,2,1,0,1,3,2,1,2,1]. In this case, 6 units of rain water (blue section) are being trapped

class Solution:
    def trap(self, height: List[int]) -> int:
        #height is a list which stores the height of every building (i.e height at every index)
        #lets take a variable result which will help us store the final result (i.e total water collected)
        result = 0 #initally we have total water to be stored as 0
        
        #then we have to find the max height of the building from the left and maximum height of the building from right
        #this is done.. because total water which can be stored between two index values will be between these two tall           
		#buildings. So we need to go from left to right and find a maximum height building and ... go from right to left           
		#and find the building with max height.
        # we will take two pointers, one will start from index 0(for left) and one will start from index(len-1) (for right).... 
		#and we parse until L and R dont collide
        l,r = 0, len(height)-1
        left_max, right_max = 0,0
        while l<r:
            left_max = max(left_max, height[l]) #will parse from left and will find the max height between the leftmost index and the current index
            right_max = max(right_max, height[r]) #will parse from right and will find the max height between the rightmost index and the current index
            
            #now we will check if leftmax is less than rightmax or vice-versa
            #we will check this because the water will overspill after the least value of left_max and right_max..
            
            if left_max <= right_max:
                result += (left_max - height[l])
                #and then we will increment the index of L by 1 (as we are going from left to right)
                l+=1
            else:
                result += (right_max - height[r])
                #and then we will decrement the index of R by 1 (as we are going from right to left)
                r-=1
        return result
