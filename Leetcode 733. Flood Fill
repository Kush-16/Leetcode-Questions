An image is represented by a 2-D array of integers, each integer representing the pixel value of the image (from 0 to 65535).

Given a coordinate (sr, sc) representing the starting pixel (row and column) of the flood fill, and a pixel value newColor, "flood fill" the image.

To perform a "flood fill", consider the starting pixel, plus any pixels connected 4-directionally to the starting pixel of the same color as the starting pixel, plus any pixels connected 4-directionally to those pixels (also with the same color as the starting pixel), and so on. Replace the color of all of the aforementioned pixels with the newColor.

At the end, return the modified image.

Input: 
image = [[1,1,1],[1,1,0],[1,0,1]]
sr = 1, sc = 1, newColor = 2
Output: [[2,2,2],[2,2,0],[2,0,1]]


class Solution:
    def floodFill(self, image: List[List[int]], sr: int, sc: int, newColor: int) -> List[List[int]]:
        row, col = len(image), len(image[0]) #finding length of row and col
        color = image[sr][sc] #setting original color of the given coordinate sr,sc
        if color == newColor: #if the color of the given coordinate = new color then simply return the image.. his will mostly happen at the last step
            return image
        
        def dfs(r,c): #helper function to parse through the 2D matrix
            if image[r][c] == color: #if the color of the coordinate is = the given color.. in this case "1"
                image[r][c] = newColor  #then change the color to newcolor.. in this case 2
                #now we check for the color to replace with the newColor in all 4 directions 
                if r >= 1: #up
                    dfs(r-1,c)
                if r+1 < row: #down
                    dfs(r+1,c)
                if c>=1: #right
                    dfs(r,c-1)
                if c+1 < col: #left
                    dfs(r,c+1)
        #calling the dfs function on the given coordinate sr and sc as per the question        
        dfs(sr,sc)
        return image
